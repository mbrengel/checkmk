
Transport in Windows Agent

Internal Transport:

Low Level
Adressing:
Common approach to establich stable communication between windows agent and its' peers is to 
send in command line of peer name of so-called "port". The port defines type of communication from peer to agent 
and depending from the type valid "address".

Format of port
[type]:[address]
    where type is one of the 4-symbols string
        mail - peer will use mailslots to communicate 
            address is valid mailslot name
        dump - peer wil send data to stdout
            address is ignored
        null - peer will drop output   
            address is ignored
        file
            address is valid file name
        asio
            address is valid IP address
            not supported yet
        grpc - reserved
        rest - reserved

Examples of valid ports:
    mail:\\.\\global\mailslot\system_0
    file:c:\apps\logs\log.txt
    null:what_do_you_want
    asio:127.0.0.1:45454
    dump:what_do_you_want

Naming
Every peer gets UNIQUE name from windows agent. This name is send in the command line and stay valid till the end of peer's execution.
Some of the communication channels require name to accept data from peer( mail  and asio)

Practice
We are using Windows mailslots for any internal communication.
Mailslots are Microsoft Windows specific and TCP/IP-based.


[  Windows Agent ]               [ Any Peer   ]
[      makes     ]               [            ]
[mailslot mailbox] <--data----   [ Postman    ]
[    callback    ]

Mailslots Implementation Details
- namespace cma
- main Class cma::Mailslot
- file mailslot_transport.h
- agent side:
    1. Create Mailslot object using name and id you like
    2. Call ConstructThread with reasonable callback inside
    3. Obtain the name of mailslot from object in p.1
    4. Deliver the name from p.3 to peer
    5. Process data from peer
    6. DismantleThread
    7. delete object.
- peer side
    1. Create Mailslot object using name you get from agent
    2. Send data in reasonable format using ExecPost
    3. Delete object
- async when correctly used
- thread safe
- performance is unlimited
- potential problems:
    when mailslot is not closed correctly we can get a zombie
    
Data Format used in channel Peer->Agent:
- namespace cma::carrier   
- file carrier.h
- class CarrierDataHeader
    POD like structure
    can be created and destructed using members
        CarrierDataHeader::create
        CarrierDataHeader::destroy
    use carefully
    not thread safe
- data package:
    [CarrierDataHeader][data....]
- data types:
    logs
    segment
    yaml - reserved

Communication for Humans
- You can use cma::carrier::CoreCarrier to simplify your life
- file carrier.h and carrier.cpp
- Usage UltraSimple
    cma::carrier::CoreCarrier::FireSend(PeerName, Port, Id, MyData, MyDataSize);
    cma::carrier::CoreCarrier::FireLog(PeerName, Port, MyData, MyDataSize);
    // where 
            PeerName is your name from command line
            Port is port string from command line
            Id is anwser id from command line (supplied by agent) 
- Usage Simple  
    {
        std::string port(Port.begin(), Port.end());
        using namespace cma::tools;
        auto id = ConvertToUint64(Id);
        CoreCarrier cc;
        cc.establishCommunication(port);
        auto ret = cc.sendData(ConvertToString(PeerName), id.value(), Data, Length);
        cc.shutdownCommunication();
    }          
- thread safe
- synchronous

Command Line for Peers, this is alos part of internal transport
- <type> <name> <port> <id> <timeout> <commands>
- type 
    -test - internal test
    -help 
    -run - not supported
    -runonce - used to run
- name - it is your name as execution unity, any string
- port 
    as defined above file:wow.txt, for example
- id 
    format "id:unique_id"
    where unique_id generated by agent and used to identify Packet to be created on Monitoring Service Request
- timeout
    format timeout:seconds
    where seconds is number of seconds, peer have to kill itself after timeout will expire
- commands, depends from provider 
    - windows perfr provider:
        list of counters 
            format counter_id:full_name_of_section
            example 234:winperf_phydisk
    - plugin player
        list of executable and folders
        


